#!/usr/bin/python3
"""
BaseModel Module

This module defines the `BaseModel` class, a foundational class for creating other models. It provides methods for initialization, string representation, saving, and converting objects to dictionaries.

Classes:
    - BaseModel: Base class for all models.

Usage:
    from base_model import BaseModel

    # Create a BaseModel instance
    instance = BaseModel(id='123', custom_value='example')

    # Get a string representation of the instance
    print(instance)
    # Output: "[BaseModel] 123 {'id': '123', 'created_at': 'current_datetime', 'updated_at': 'current_datetime', 'custom_value': 'example'}"

    # Update the 'updated_at' attribute
    instance.save()

    # Convert the instance to a dictionary
    instance_dict = instance.to_dict()

Description:
    The `BaseModel` class serves as the foundation for creating other model classes. It includes the following methods:

    - __init__(*args, **kwargs): Constructor to initialize object attributes. You can pass custom attributes using keyword arguments. If 'created_at' or 'updated_at' keys are present in 'kwargs', they are converted to datetime objects.

    - __str__(): Returns a string representation of the class model, including the class name, object id, and object attributes.

    - save(): Method that updates the 'updated_at' attribute to the current date and time when called.

    - to_dict(): Converts the object into a dictionary, including its attributes and class information.

Note:
    - The 'id' attribute is generated using `uuid4()` to ensure uniqueness.
    - Dates and times are represented as strings in the format "%Y-%m-%d-%H:%M:%S".
    - You can add custom attributes to your BaseModel instances as needed.

Example:
    # Create a BaseModel instance with custom attributes:
    instance = BaseModel(id='123', custom_value='example')

    # Print the instance's string representation
    print(instance)
    # Output: "[BaseModel] 123 {'id': '123', 'created_at': 'current_datetime', 'updated_at': 'current_datetime', 'custom_value': 'example'}"

    # Update the 'updated_at' attribute
    instance.save()

    # Convert the instance to a dictionary
    instance_dict = instance.to_dict()
    print(instance_dict)
    # Output: {'id': '123', 'created_at': 'current_datetime', 'updated_at': 'updated_datetime', 'custom_value': 'example', '__class__': 'BaseModel'}
"""

from datetime import datetime
from uuid import uuid4
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()

class BaseModel:
    """
    Base class of the models.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor for the attributes.

        Args:
            *args: Additional positional arguments (not used in this class).
            **kwargs: Keyword arguments to initialize object attributes.
                - id (str): Unique identifier generated by uuid4.
                - created_at (str): Date and time when the object was created (formatted as "%Y-%m-%d-%H:%M:%S").
                - updated_at (str): Date and time when the object was last updated (formatted as "%Y-%m-%d-%H:%M:%S").
                - Other custom attributes specific to derived classes.

        Note:
            If 'created_at' or 'updated_at' keys are present in 'kwargs', their string representations will be
            converted to datetime objects using the format "%Y-%m-%d-%H:%M:%S".

        Example:
            # Create a BaseModel instance with custom attributes:
            instance = BaseModel(id='123', custom_value='example')

        """
        if kwargs:
            for key, value in kwargs.items():
                if key == "created_at" or key == "updated_at":
                    value = datetime.strptime(value, "%Y-%m-%d-%H:%M:%S")
                if key != "__class__":
                    setattr(self, key, value)
        self.id = str(uuid4())  # Generate a unique identifier using uuid4.
        self.created_at = self.updated_at = datetime.now().strftime("%Y-%m-%d-%H:%M:%S")

    def __str__(self):
        """
        Returns a string representation of the class model.

        Returns:
            str: A string containing the class name, object id, and object attributes.

        Example:
            instance = BaseModel(id='123', custom_value='example')
            print(instance)
            # Output: "[BaseModel] 123 {'id': '123', 'created_at': 'current_datetime', 'updated_at': 'current_datetime', 'custom_value': 'example'}"
        """
        return f"[{self.__class__.__name__}] {self.id} {self.__dict__}"

    def save(self):
        """
        Method that updates the 'updated_at' attribute to the current date and time when called.

        Example:
            instance = BaseModel()
            print(instance.updated_at)
            instance.save()
            print(instance.updated_at)  # Updated time after calling 'save'.
        """
        self.updated_at = datetime.now().strftime("%Y-%m-%d-%H:%M:%S")

    def to_dict(self):
        """
        Converts the object into a dictionary.

        Returns:
            dict: A dictionary containing the object's attributes and class information.

        Example:
            instance = BaseModel(id='123', custom_value='example')
            instance_dict = instance.to_dict()
            print(instance_dict)
            # Output: {'id': '123', 'created_at': 'current_datetime', 'updated_at': 'current_datetime', 'custom_value': 'example', '__class__': 'BaseModel'}
        """
        new_dict = self.__dict__.copy()
        new_dict["__class__"] = self.__class__.__name__
        new_dict["created_at"] = self.created_at
        new_dict["updated_at"] = self.updated_at
        return new_dict
